---
alwaysApply: true
---

# Sunnsteel Frontend - Fitness Application

Este es el proyecto frontend para Sunnsteel, una aplicación de fitness y entrenamiento.

## Stack Tecnológico

- **Framework**: Next.js 15.2.1 (App Router) con TypeScript
- **UI Library**: React 19 con TailwindCSS v4
- **Componentes**: Shadcn/ui con Radix UI primitives
- **Estado**: TanStack Query (React Query) para server state
- **Formularios**: React Hook Form con Zod validation
- **Iconos**: Lucide React
- **Fuentes**: Geist Sans y Geist Mono
- **Autenticación**: JWT con refresh tokens

## Estructura del Proyecto

### App Router Structure

- **`app/(auth)/`**: Páginas de autenticación (login, signup)
- **`app/(protected)/`**: Páginas protegidas (dashboard, routines)
- **`app/layout.tsx`**: Layout principal con providers
- **`app/page.tsx`**: Página de inicio

### Páginas Disponibles

- **`app/(auth)/login/page.tsx`**: Página de inicio de sesión
- **`app/(auth)/signup/page.tsx`**: Página de registro
- **`app/(protected)/dashboard/page.tsx`**: Dashboard principal con widget dinámico "Today's Workouts" que lista rutinas del día actual y permite iniciar/reanudar sesiones o ver detalles.
- **`app/(protected)/routines/page.tsx`**: Gestión de rutinas
- Heart toggle en tarjetas de rutinas para favoritos
- ListChecks toggle para marcar rutinas como completadas
- **`app/(protected)/routines/[id]/page.tsx`**: Detalle de rutina con controles para iniciar sesión por día o Quick Start
- **`app/(protected)/routines/new/page.tsx`**: Creación de rutina (wizard)
- **`app/(protected)/routines/edit/[id]/page.tsx`**: Edición de rutina (wizard con mapeo desde backend a estado local)
- **`app/(protected)/workouts/page.tsx`**: Índice de entrenamientos. Si existe sesión activa redirige a `/workouts/sessions/[id]`; de lo contrario, muestra un hub con CTAs para ir a Rutinas o al Dashboard.
- **`app/(protected)/workouts/sessions/[id]/page.tsx`**: Sesión activa de entrenamiento (mobile-first)
- **`app/(protected)/workouts/history/page.tsx`**: Historial de sesiones con filtros e infinite scroll
- **`app/page.tsx`**: Página de inicio pública

-### Directorios Principales

- **`components/`**: Componentes reutilizables (design system, fondos, iconos)
- **`features/`**: Módulos orientados a dominio
  - `shell/`: Sidebar, header, banners y otros elementos de la cáscara protegida
  - `routines/`: Rutinas, RtF dashboards y wizard completo
- **`providers/`**: Context providers (Auth, App, Query)
- **`hooks/`**: Custom hooks (useAuthProtection, useSidebar)
- **`lib/`**: Utilidades y servicios
  - `api/`: Servicios de API y hooks (9 servicios disponibles)
    - `workoutService.ts`:
      - `startSession({ routineId, routineDayId, notes? })`
      - `getActiveSession()`
      - `getSessionById(id)`
      - `finishSession(id, { status, notes? })`
      - `upsertSetLog(id, { routineExerciseId, exerciseId, setNumber, reps, weight?, rpe?, isCompleted? })`
      - `deleteSetLog(id, routineExerciseId, setNumber)`
    - `utils.ts`: Utilidades generales
  - `utils/reps-to-failure.ts`: Utilidades de programación RtF
    - `generateRepsToFailureProgram(config, performance)`: variante de fuerza (5 sets: 4 + 1 AMRAP). Deloads al 60% con `3x5 @ RPE 6`.
    - `generateRepsToFailureHypertrophyProgram(config, performance)`: variante de hipertrofia (4 sets: 3 + 1 AMRAP). Deloads al 60% con `4x5` y “no rep targets”.
    - Reglas de ajuste de TM por desempeño en última serie AMRAP: −5% (−2+ reps), −2% (−1), 0% (objetivo), +0.5% (+1), +1% (+2), +1.5% (+3), +2% (+4), +3% (+5+).
- **`schema/`**: Esquemas de validación Zod (loginSchema, signupSchema)

-### Routine Creation/Edit Wizard

- Tipo compartido: `features/routines/wizard/types.ts` exporta `RoutineWizardData`, `RepType` y `ProgressionScheme`.
- `RoutineWizardData` incluye `programScheduleMode?: 'TIMEFRAME' | 'NONE'` para elegir si el programa es por calendario o indefinido.
- Repeticiones por set:
  - `repType`: `'FIXED' | 'RANGE'`
  - `FIXED` → usar `reps`.
  - `RANGE` → usar `minReps` y `maxReps`.
- Componentes del wizard (todos usan el tipo compartido):
  - `RoutineBasicInfo` → nombre/descripción
    - Selector "Program Schedule": `None (indefinite)` o `Timeframe (date-driven)`.
    - Si selecciona `Timeframe`, se muestra `Program start date` en el mismo paso.
    - `programTimezone` se detecta automáticamente desde el navegador (no se solicita).
  - `TrainingDays` → selección de `trainingDays`
    - Panel RtF solo cuando existe algún ejercicio con RtF.
    - Incluye: `programWithDeloads` y `programStartWeek` (solo creación). La pista de consistencia de día de la semana usa la fecha configurada en Basic Info.
  - `BuildDays` → gestionar `days[].exercises[].sets[]` con `repType` por set e inputs condicionales, y progresión por ejercicio
    - Cuando `programScheduleMode === 'NONE'`, las opciones de progresión con fecha (`PROGRAMMED_RTF` y `PROGRAMMED_RTF_HYPERTROPHY`) aparecen deshabilitadas y cualquier selección previa se normaliza a `NONE`.
  - `ReviewAndCreate` → prepara payload según `repType` y crea/actualiza la rutina
- Páginas:
  - Nueva: `app/(protected)/routines/new/page.tsx`
  - Edición: `app/(protected)/routines/edit/[id]/page.tsx` (mapea rutina del backend a `RoutineWizardData`, incluyendo `repType/minReps/maxReps`)
  - Compatibilidad (Edit): Valores legados de backend para `progressionScheme` se mapean automáticamente — `'DYNAMIC'` → `'DOUBLE_PROGRESSION'`, `'DYNAMIC_DOUBLE'` → `'DYNAMIC_DOUBLE_PROGRESSION'`. Valores faltantes o desconocidos se normalizan a `'NONE'`.

#### PROGRAMMED_RTF (RtF) — Integración Frontend

- `progressionScheme` ahora incluye: `'NONE' | 'DOUBLE_PROGRESSION' | 'DYNAMIC_DOUBLE_PROGRESSION' | 'PROGRAMMED_RTF'`.
- En `BuildDays` cuando se selecciona `PROGRAMMED_RTF`:
  - Se muestran campos por ejercicio:
    - `programTMKg` (Training Max en kg)
    - `programRoundingKg` (0.5 | 1.0 | 2.5 | 5.0)
  - Si `scheme !== 'NONE'`, los sets se convierten automáticamente a `RANGE` (si eran `FIXED`) con `min=max=reps` como fallback, y se limpian `reps`.
  - Se inicializa `programRoundingKg` a 2.5 si no estaba definido.
- En `TrainingDays` se muestra un panel de configuración del programa RtF cuando cualquier ejercicio usa RtF:
  - `programWithDeloads` (boolean)
  - `programStartDate` (YYYY-MM-DD) se configura en Basic Info; aquí solo se muestra la pista de consistencia.
  - `programTimezone` (IANA TZ) se detecta automáticamente y no se solicita.
  - `programStartWeek` (solo creación): Default 1; rango 1..(18|21) según deloads. Si se apagan deloads y el valor supera 18, se clampa a 18.
  - Aviso si el día de `programStartDate` no coincide con el primer día seleccionado en `trainingDays`.
- Navegación/gating:
  - Para avanzar de "Build Days" a "Review", si existe RtF se requiere `programStartDate`.
- En `ReviewAndCreate` el payload incluye:
  - Campos de rutina (solo si hay RtF y `programScheduleMode === 'TIMEFRAME'`): `programWithDeloads`, `programStartDate`, `programTimezone`.
  - En creación, además `programStartWeek`.
  - Por ejercicio (solo para RtF): `programTMKg`, `programRoundingKg`.

Notas:

- El backend persiste `programStartWeek` y lo retorna en las respuestas de rutina. La UI lo usa solo en la creación (create-only), y podría mostrarse de forma read-only en detalles más adelante.

### Middleware

- **`middleware.ts`**: Protección de rutas y redirecciones
- Rutas protegidas: `/dashboard`, `/workouts`, `/profile`, `/settings`
- Rutas de auth: `/login`, `/signup`
- Las páginas de auth redirigen a `/dashboard` SOLO cuando existe cookie `refresh_token`.
- Si existe `has_session` sin `refresh_token`, el middleware elimina la cookie `has_session` y permite acceder a `/login`/`/signup` (previene loops de redirección).
- Las páginas protegidas redirigen a `/login` cuando no hay `refresh_token` (incluye `callbackUrl`).

## Patrones de Desarrollo

### Autenticación

- **AuthProvider**: Context para estado de autenticación
- **useAuth**: Hook para acceder al estado de auth
- **useAuthProtection**: Hook para proteger rutas
- **useSidebar**: Hook para manejo de sidebar
- **Token Management**: Access tokens en localStorage, refresh tokens en cookies
- **Auto-refresh**: Renovación automática de tokens

### API Integration

- **httpClient**: Cliente HTTP centralizado con interceptors
- **Services**:
  - `authService.ts`: Servicios de autenticación
  - `userService.ts`: Servicios de usuario
  - `tokenService.ts`: Servicios de tokens
  - `routineService.ts`:
    - `toggleFavorite(id, isFavorite)`
    - `toggleCompleted(id, isCompleted)`
    - `getUserRoutines({ isFavorite?, isCompleted? })` soporta filtros vía querystring
  - `workoutService.ts`:
    - `startSession({ routineId, routineDayId, notes? })`
    - `getActiveSession()`
    - `getSessionById(id)`
    - `listSessions({ status?, routineId?, from?, to?, q?, cursor?, limit?, sort? })`
    - `finishSession(id, { status, notes? })`
    - `upsertSetLog(id, { routineExerciseId, exerciseId, setNumber, reps, weight?, rpe?, isCompleted? })`
    - `deleteSetLog(id, routineExerciseId, setNumber)`
- **API Hooks**:
  - `useRegister.ts`, `useLogin.ts`, `useLogout.ts`
  - `useUser.ts`, `useRefreshToken.ts`
  - `useRoutines.ts`:
    - `useRoutines(filters?)` donde `filters` = `{ isFavorite?, isCompleted? }` y forma parte del `queryKey`
    - `useToggleRoutineFavorite()` con optimistic updates
    - `useToggleRoutineCompleted()` con optimistic updates
  - `useWorkoutSession.ts`:
    - `useStartSession()`
    - `useActiveSession()`
    - `useSession(id)`
    - `useSessions(params)` (lista paginada de historial con filtros y cursor)
    - `useFinishSession(id)`
    - `useUpsertSetLog(id)`
- **Types**: `auth.type.ts` para tipos de autenticación
  - `routine.type.ts`: `Routine` incluye `isFavorite: boolean` e `isCompleted: boolean`
  - `components/routines/create/types.ts`: `RoutineWizardData` y `RepType` para el wizard de rutinas
  - `workout.type.ts`: Tipos para `WorkoutSession`, `SetLog` y DTOs (start/finish/upsert)
- **TanStack Query**: Para cache y estado del servidor
- **Error Handling**: Manejo centralizado de errores

### Formularios

- **React Hook Form**: Para manejo de formularios
- **Zod Schemas**: Validación de tipos y runtime
- **Schemas disponibles**:
  - `loginSchema`: Validación de login
  - `signupSchema`: Validación de registro

### UI/UX

- **Shadcn/ui**: Componentes base consistentes
- **TailwindCSS**: Styling utility-first
- **Responsive Design**: Mobile-first approach
- **Dark Mode**: Soporte para tema oscuro
- **Dark Mode / Theme Toggle**:
  - `ThemeProvider` global (next-themes) en `app/layout.tsx` con `attribute="class"`, `defaultTheme="system"`, `enableSystem`.
  - Toggle accesible `ModeToggle` ubicado:
    - En el header protegido: `app/(protected)/components/Header.tsx`.
    - En el layout de auth (esquina superior derecha): `app/(auth)/layout.tsx`.
  - Transición suave de colores: `body` aplica `transition-colors duration-500` en `app/globals.css`.

### Design System — Classical Renaissance

- Paleta clásica definida como CSS vars en `app/globals.css`:
  - Oro: `--ss-gold`, `--ss-gold-2` (gradiente `--ss-grad-gold`)
  - Bronce: `--ss-bronze`, `--ss-bronze-2`
  - Carmesí, Carbón, Ivory/Crema, Bosque, Púrpura
- Tipografía: encabezados con Cinzel (via `next/font`) mediante utilidad `.heading-classical`; cuerpo en Geist.
- Utilidades: `.bg-marble-light` (textura sutil), `.text-gold` (acento oro).
- Variantes UI:
  - Button: `variant="classical" | "bronze" | "marble"` en `components/ui/button.tsx` (no rompe defaults).
  - Badge: `variant="classical"` opcional para acentos.
  - Progress: `variant="gold"` opcional (indicador con gradiente dorado).
- Iconografía clásica mediante máscara CSS:
  - `components/icons/ClassicalIcon.tsx` renderiza SVGs desde `/public/icons/classical/*.svg` con `currentColor`.
  - Reemplazos aplicados: `StatsOverview` y CTAs clave (Workouts hub), Sidebar opcional con `classicalName`.
- Héroes clásicos (banners delgados con overlays y OrnateCorners):
  - Dashboard: `/backgrounds/hero-greek-background.webp`
  - Routines index: `/backgrounds/vertical-hero-greek-columns.webp`
  - Routine details: `/backgrounds/alexander-the-great-statue-background.webp`
  - Workouts history: `/backgrounds/vertical-hero-greek-columns.webp` (h2 "Training Archive")
  - Active session: `/backgrounds/vertical-hero-greek-columns.webp` (shallow)
  - Routine wizard (New/Edit): `/backgrounds/vertical-hero-greek-columns.webp`
- Filtros (Routines): `WorkoutFilters` usa ClassicalIcon para "All" (pillar-icon) y "Recent" (hourglass); se mantienen Heart y ListChecks.
- Sidebar: fondo mármol sutil + línea vertical dorada (estilo de columna), título con `.heading-classical`.
- Dashboard: `StatCard` usa halo dorado para íconos, números con Cinzel y Progress dorado.
- **Accessibility**: Componentes accesibles con Radix
- **Favorites UI**: Botón Heart accesible para marcar/desmarcar favoritos en `WorkoutsList`
- **Completed UI**: Botón ListChecks accesible para marcar/desmarcar como completada en `WorkoutsList`
- **Start Session UX**: Botón "Start" (inicia con el primer día) y menú para seleccionar día en `WorkoutsList`; navegación a página de sesión activa.
- **Routine Details UX**: Página de detalle accesible desde el dropdown de rutinas con opción "Open".
  - Quick Start prioriza el día de hoy si existe; si no, usa el primer día de la rutina.
  - Gating: cuando `programEndDate` ya pasó (programa RtF completado), los botones de Start se deshabilitan y se muestra un badge "Program ended".
  - Días colapsables con Accordion (shadcn/Radix). El día de hoy aparece expandido por defecto y con badge "Today".
  - Header de cada día: badge de weekday + número de día + contador de ejercicios. Se eliminaron los pills superiores redundantes.
  - Cada panel de día incluye su propio botón "Start" para iniciar ese día específico.
  - Muestra la estructura completa de la rutina: ejercicios (con descanso) y sets (tipo FIXED/RANGE con reps y peso) en orden.
  - Loading: El breadcrumb ("Routines / Nombre") permanece visible durante la carga mediante skeletons inline; se reemplazó el early return de loading por placeholders inline.
  - Si existe una sesión activa de otro día, se muestra un diálogo de conflicto para ir a la sesión activa.
  - Si se intenta iniciar un día distinto al de hoy, aparece una confirmación de desajuste de fecha (puede proceder igualmente).
  - Animación del Accordion: el contenido usa CSS `grid-template-rows` (0fr→1fr) + fade con `duration-300 ease-in-out` para un expand/contraer suave y estable (ver `components/ui/accordion.tsx`).
  - **Dashboard — Today’s Workouts (Mobile)**:
  - Las tarjetas solo muestran el nombre de la rutina y el badge del día (la descripción se oculta para evitar clipping).
  - Las acciones se presentan como dos botones de ancho completo en una grilla de 2 columnas (Start/Resume y Details) para evitar solapamiento/truncamiento de texto.
  - En pantallas grandes, las acciones se alinean en línea a la derecha como antes.
- **Routine Wizard UX**: En `BuildDays`, inputs accesibles que cambian entre `reps` fijos o rango (`minReps`/`maxReps`) según `repType` por set; validaciones y previsualización en `ReviewAndCreate`.
- **Stepper Advanced Navigation (Edit Mode)**: El `Stepper` ahora acepta props avanzadas para control fino:
  - `completedSteps?: Set<number>` para marcar pasos completos basados en validez de datos (no solo por posición).
  - `canStepClick?: (stepId: number) => boolean` para habilitar clicks directos a pasos permitidos.
  - En edición, el usuario puede saltar directamente a cualquier paso si todos los pasos previos son válidos, sin tener que navegar secuencialmente. En creación se mantiene el flujo secuencial.
- Refactor: `BuildDays` ahora compone `components/routines/create/ExerciseCard.tsx` (con `SetRow` interno) para modularizar la UI de ejercicios y sets.
- Jerarquía de header: el título del ejercicio se muestra por encima del timer/controles.
- **Rep Type** y **Progression** usan el componente `Select` de shadcn/ui para consistencia visual, mejor alineación del popover y comportamiento de apertura/cierre confiable en mobile/desktop.
- **Progression (Mobile Overflow Fixes)**:
  - El `Select` de Progression ahora está restringido en ancho en mobile (`w-36 sm:w-40 max-w-[60vw]`) y su dropdown clampa a viewport (`max-w-[calc(100vw-2rem)]`) para evitar overflow.
  - El campo "Weight Inc. (kg)" solo se muestra cuando `progressionScheme !== 'NONE'`.
  - En mobile, los botones +/- del incremento de peso se ocultan (`hidden sm:inline-flex`) para evitar desbordes; el input sigue editable.
  - Edición: Si el backend envía valores legados (`'DYNAMIC'`, `'DYNAMIC_DOUBLE'`), se mapean a los actuales para el wizard.
- Botones stepper (+/-) para `reps` y `weight` con clamping: fijos 1..50; rango `min`/`max` 1..50 con cross-clamp (min ≤ max); weight en incrementos de 0.5 (mínimo 0).
- Inputs de rango (`minReps`/`maxReps`) usan `type="text"` con `inputMode="numeric"` para permitir edición fluida.
- **Skeleton Loaders**: `components/ui/skeleton.tsx` para estados de carga en `WorkoutsList` y página de sesión activa.
- **Progress Bars**: `components/ui/progress.tsx` usado para:
  - Progreso de sesión en `app/(protected)/workouts/sessions/[id]/page.tsx` (sets completados vs total).
  - Indicador de finalización en tarjetas de `WorkoutsList`.
- **Button Feedback**: Micro-interacciones sutiles al presionar botones (scale/translate) en `components/ui/button.tsx`.
- **Sticky Navigation (Wizard)**:
  - Stepper pegajoso en la parte superior en `app/(protected)/routines/new/page.tsx` y también en `app/(protected)/routines/edit/[id]/page.tsx`.
  - Navegación inferior pegajosa (Previous/Next) en la página de creación para mejor alcance en mobile.
- **Tabs de Días (BuildDays) UX Fixes**:
  - El contador de ejercicios por día ahora siempre es visible como `Badge` y muestra `0` cuando el día está vacío.
  - Se eliminó el scroll vertical en la fila de días y se forzó únicamente scroll horizontal en mobile.
  - Estilos del `Badge` normalizados para evitar jumps de layout y aparición de scroll vertical intermitente.
- **ExerciseCard Expand/Collapse (Smoother)**:
- Animación simplificada tipo móvil: transición de `max-height` + `opacity` (300ms, ease-in-out) al expandir/contraer.
- Se movió el padding al contenedor interno para evitar saltos de layout durante la transición.
- Rotación del ícono `ChevronsUpDown` suavizada (300ms, ease-in-out).
- **Resume Banner**: Banner de reanudación de sesión activa en `app/(protected)/layout.tsx` visible cuando existe una sesión activa (oculto en la página de la sesión).
- **Set Logs Editor**: Editor agrupado por ejercicio (cuando hay metadata de rutina vía `useRoutine`) en `app/(protected)/workouts/sessions/[id]/page.tsx`:
  - Sin agregar/eliminar sets en sesión (estructura fija según la rutina).
  - Reps planeadas: de solo lectura (no editables).
  - Reps realizadas: input separado y editable.
  - Peso: input editable con pista del peso planeado.
  - RPE: no editable por ahora (oculto en la UI).
  - Usa `useUpsertSetLog(id)` e invalida el query de la sesión; el endpoint de borrar existe pero no se expone en la UI.
- **Autosave Toggle Fix**: El autosave al alternar "Completed" ahora usa el siguiente estado (no el estado previo) para evitar condiciones de estado obsoleto.

## Componentes Disponibles

### UI Components (Shadcn)

- **Form Components**: Button, Input, Label, Form
- **Layout Components**: Card, Separator, Scroll Area
- **Navigation**: Tabs, Dropdown Menu
- **Data Display**: Avatar, Badge, Progress
- **Loading**: Loading component, Skeleton

### Layout Components

- **Sidebar navigation**: Navegación lateral
- **Protected route wrappers**: Envoltorios de rutas protegidas
- **Auth layouts**: Layouts de autenticación
- **Loading component**: Componente de carga

## Configuración

### Variables de Entorno

- `NEXT_PUBLIC_API_URL`: URL del backend API
- `NEXT_PUBLIC_FRONTEND_URL`: URL del frontend

### Scripts Disponibles

- `npm run dev`: Desarrollo con Turbopack
- `npm run dev:all`: Frontend + Backend simultáneo
- `npm run build`: Build de producción
- `npm run lint`: Linting con ESLint
- `npm run test`: Ejecuta tests con Vitest una sola vez
- `npm run test:watch`: Ejecuta tests en modo watch
- `npm run test:coverage`: Ejecuta tests con cobertura (text + lcov)

### Testing (Frontend)

- Stack: Vitest + Testing Library (React) sobre `jsdom`.
- Configuración: `vitest.config.ts`
  - `test.environment = 'jsdom'`
  - `test.globals = true`
  - `resolve.alias` mapea `@` a la raíz del proyecto
  - Cobertura con `@vitest/coverage-v8`
- Setup global: `test/setup.ts` (jest-dom)
  - Incluye un mock no-op de `Element.prototype.scrollIntoView` para evitar errores de Radix UI Select en jsdom.
- Utilidades de test: `test/utils.tsx` (helper `render` y `createQueryWrapper(client?)` para envolver con `QueryClientProvider`)
- Tests iniciales:
  - `test/lib/utils/time.test.ts` (helpers de tiempo)
  - `test/components/ui/button.test.tsx` (render básico del Button)
  - `test/lib/utils/reps-to-failure-hypertrophy.test.ts` (utilidad RtF Hipertrofia)
  - `test/app/protected/workouts/sessions/active-session-page.test.tsx` (tests de la página de sesión activa: finalizar/abortar con navegación y autosave/remove de set logs)

### CI

- Workflow: `.github/workflows/ci.yml`
- Disparadores: push (main/master/develop) y todos los PRs
- Pasos: `npm ci` → `npm run test:coverage` (Vitest + Coverage V8) → sube artefacto `coverage/`

## Patrones de Código

### Imports y Aliases

- `@/components`: Componentes
- `@/lib`: Utilidades y servicios
- `@/hooks`: Custom hooks
- `@/providers`: Context providers
- `@/schema`: Esquemas de validación

### Convenciones

- **Componentes**: PascalCase, functional components
- **Hooks**: camelCase con prefijo "use"
- **Services**: camelCase con sufijo "Service"
- **Types**: PascalCase con sufijo "Type"
- **Schemas**: camelCase con sufijo "Schema"

### Manejo de Estado

- **Server State**: TanStack Query
- **Client State**: React Context + useState
- **Form State**: React Hook Form
- **Auth State**: AuthProvider context

## Integración con Backend

### Endpoints Consumidos

- `POST /api/auth/login`: Inicio de sesión
- `POST /api/auth/register`: Registro
- `POST /api/auth/logout`: Cierre de sesión
- `POST /api/auth/refresh`: Renovación de tokens
- `GET /api/users/profile`: Perfil de usuario
- `POST /api/workouts/sessions/start`: Iniciar sesión de entrenamiento
- `GET /api/workouts/sessions/active`: Obtener sesión activa
- `GET /api/workouts/sessions`: Listado de sesiones (historial) con filtros y paginación
- `GET /api/workouts/sessions/:id`: Obtener sesión por id
- `PATCH /api/workouts/sessions/:id/finish`: Finalizar sesión
- `PUT /api/workouts/sessions/:id/set-logs`: Upsert de registros de sets
- `DELETE /api/workouts/sessions/:id/set-logs/:routineExerciseId/:setNumber`: Eliminar un set log específico

### Autenticación Flow

1. Login/Register → Access token en localStorage
2. Refresh token en cookies (httpOnly)
3. Auto-refresh cuando access token expira
4. Logout → Limpia tokens y redirige

## Características de la Aplicación

### Funcionalidades Principales

- **Dashboard**: Vista principal con estadísticas y rutinas
- **Workout Management**: Gestión de rutinas de entrenamiento
- **User Profile**: Perfil de usuario y configuración
- **Authentication**: Sistema completo de auth

### UX/UI Features

- **Responsive**: Mobile-first design
- **Loading States**: Estados de carga con TanStack Query
- **Error Boundaries**: Manejo de errores
- **Form Validation**: Validación en tiempo real
- **Accessibility**: Componentes accesibles

## Contexto para el Agente

Cuando implementes funcionalidades:

- Usa Next.js App Router patterns
- Implementa autenticación con JWT
- Sigue los patrones de TanStack Query
- Usa Shadcn/ui para componentes
- Valida formularios con Zod
- Mantén responsive design
- Considera accesibilidad
- Integra con el backend NestJS

## PWA Support

- Manifest linked in `app/layout.tsx` to `/site.webmanifest`.
- Service Worker at `public/sw.js` with cache-first strategy for core assets.
- Client registration via `providers/pwa-provider.tsx`, rendered from `app/layout.tsx`.
- Serve over HTTPS in production; iOS supports Add to Home Screen with limitations.
